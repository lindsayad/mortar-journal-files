# This script meshes a unit square which is split down the middle by
# an infinitely thin gap with a non-conforming mesh on both sides. The
# intent is to verify that we can reproduce a hand calculation's value.
#
# Note: this is not actually the case I pre-computed, for that you
# need to have some same size elements on the top and bottom...

# cd '/Users/petejw/code/peterson_git/cubit/nodal_normals'
# play "nodal_normals_test_3_to_2.jou"

# Clear any existing model
reset

# Create outer part
create brick width 1 depth 1 height 1

# Split in half but don't merge
webcut body all plane yplane

# Note: In Cubit's numbering, body 2 is actually on top!
block 1 surf 15
block 2 surf 8

# Give the blocks names for easier identification.
block 1 name 'top'
block 2 name 'bottom'

# Sidesets for the "contact" surfaces.
sideset 1 curve 23
sideset 1 name 'top_contact'
sideset 2 curve 15
sideset 2 name 'bottom_contact'

# We will probably want other sidesets for specifying BCs too. We
# number everything counter clockwise starting from the bottom.
sideset 3 curve 17
sideset 3 name 'bottom_left'
sideset 4 curve 18
sideset 4 name 'bottom_right'
sideset 5 curve 28
sideset 5 name 'top_left'
sideset 6 curve 26
sideset 6 name 'top_right'
sideset 7 curve 2
sideset 7 name 'top'
sideset 8 curve 4
sideset 8 name 'bottom'

# Set intervals and mesh the top
curve 23 interval 3
curve 28 interval 1
surf 15 scheme Map
mesh surf 15

# Set interval and mesh the bottom
curve 15 interval 2
curve 17 interval 1
surf 8 scheme Map
mesh surf 8

# Set the geometric element type to use in each block.
block 1 element type QUAD4
block 2 element type QUAD4

# Write to file.
export mesh "nodal_normals_test_3_to_2.e" dimension 2 block 1 2 overwrite

# Local Variables:
# mode: shell-script
# End:
