# This script meshes a unit square which is split along the line y=-x by
# an infinitely thin gap with a non-conforming mesh on both sides.

# cd '/Users/petejw/code/peterson_git/cubit/nodal_normals'
# play "nodal_normals_test_diagonal_nonmatching_nogap.jou"

# Clear any existing model
reset

# Create outer part
create brick width 1 depth 1 height 1

# Split in half but don't merge
webcut body all with plane xplane rotate 45 about z

# We put block 1 on the left, block 2 on the right.
block 1 surf 12
block 2 surf 8

# Give the blocks names for easier identification.
block 1 name 'left'
block 2 name 'right'

# left_sideset is on the left side of the contact surface, right_sideset is on the right.
sideset 1 curve 17
sideset 1 name 'left_sideset'
sideset 2 curve 14
sideset 2 name 'right_sideset'

# We will probably want other sidesets for specifying BCs too. We
# number everything counter clockwise starting from the bottom.
sideset 3 curve 4
sideset 3 name 'bottom'
sideset 4 curve 1
sideset 4 name 'right'
sideset 5 curve 2
sideset 5 name 'top'
sideset 6 curve 3
sideset 6 name 'left'

# The base intervals are multiplied by the interval_multiplier variable
# to get successively-refined grids.
# {interval_multiplier = 1}

# Set the mesh interval along the diagonal.
curve 17 interval {21 * interval_multiplier}
curve 14 interval {20 * interval_multiplier}

# Set outside boundary intervals.
curve 3 4 interval {15 * interval_multiplier}
curve 1 2 interval {14 * interval_multiplier}

# Mesh the part on the left with triangles.
surf 12 scheme TriDelaunay
mesh surf 12

# Mesh the part on the right with triangles.
surf 8 scheme TriDelaunay
mesh surf 8

# Set the geometric element type to use in each block.
block 1 element type TRI3
block 2 element type TRI3

# Write to file.
export mesh "nodal_normals_test_diagonal_nonmatching_nogap.e" dimension 2 block 1 2 overwrite

# Local Variables:
# mode: shell-script
# End:
