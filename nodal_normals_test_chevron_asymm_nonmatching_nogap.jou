# This script meshes a unit square which is cut by a "chevron" shaped
# interface. The idea is to generate an exactly-meshable interface with
# normals that are not perpendicular to the boundary normals.
# The chevron is allowed to be offset up and down in the y direction,
# and the angles on either side of the chevron shape can be chosen
# independently.

# cd '/Users/petejw/code/peterson_git/cubit/nodal_normals'
# play "nodal_normals_test_chevron_asymm_nonmatching_nogap.jou"

# Clear any existing model
reset

# Create the bottom half.
create brick width 1 depth 1 height 1

# The angle of the left cut from the negative x-axis in degrees.
# {angle1 = 15}

# The angle of the right cut from the positive x-axis in degrees.
# {angle2 = 5}

# The y-location where the cut planes will cross.
# {yoff = 0.2}

# Compute H1 = 1/2*tan(angle1). This is the distance above yoff where
# the interface intersects the left side of the mesh.
# {H1 = .5 * tan(angle1 * 3.14159265359 / 180)}

# Compute H2 = 1/2*tan(angle2). This is the distance above yoff where
# the interface intersects the right side of the mesh.
# {H2 = .5 * tan(angle2 * 3.14159265359 / 180)}

# Do some error checking on the input parameters:

# 1.
# {check_val1 = yoff + H1}
# {if (check_val1 > 0.5)}
# {Print("yoff,angle1 combination is not valid.")}
stop
# {endif}

# 2.
# {check_val2 = yoff + H2}
# {if (check_val2 > 0.5)}
# {Print("yoff,angle2 combination is not valid.")}
stop
# {endif}

# 3.
# {if (yoff <= -0.5)}
# {Print("yoff is too small.")}
stop
# {endif}

# 4.
# {if (angle1 < 0.)}
# {Print("angle1 must be between 0 and 90.")}
stop
# {endif}

# 5.
# {if (angle1 > 90.)}
# {Print("angle1 must be between 0 and 90.")}
stop
# {endif}

# 6.
# {if (angle2 < 0.)}
# {Print("angle2 must be between 0 and 90.")}
stop
# {endif}

# 7.
# {if (angle2 > 90.)}
# {Print("angle2 must be between 0 and 90.")}
stop
# {endif}

# Cut the body with planes
webcut body all with plane xplane rotate {90 - angle1} about z center 0 {yoff} 0
webcut body all with plane xplane rotate {-90 + angle2} about z center 0 {yoff} 0

# Get rid of the bottom volumes
delete vol 1 2 4

# Make a copy volume 3 (creates volume 5)
vol 3 copy

# Create another brick (vol 6)
create brick width 1 depth 1 height 1

# Create the bottom part (remaining volumes are 3 and 6)
subtract volume 5 from volume 6

# block 1 on bottom, block 2 on top.
block 1 surf 25
block 2 surf 52

# Set up sideset ids and names.
sideset 1 curve 40 43
sideset 1 name 'contact_top'
sideset 2 curve 89 94
sideset 2 name 'contact_bot'

# Set up sidesets for other BCs
sideset 3 curve 79
sideset 3 name 'bottom'
sideset 4 curve 96
sideset 4 name 'right_bottom'
sideset 5 curve 44
sideset 5 name 'right_top'
sideset 6 curve 2
sideset 6 name 'top'
sideset 7 curve 18
sideset 7 name 'left_top'
sideset 8 curve 95
sideset 8 name 'left_bottom'

# The base intervals are multiplied by the interval_multiplier variable
# to get successively-refined grids.
# {interval_multiplier = 1}

# Set intervals on the contact interfaces. We set the default slave
# interval slightly coarser than the master since that has been show
# to achieve best results in the past. Technically, these are different
# lengths now, but hopefully that doesn't matter too much...
curve 40 43 interval {10 * interval_multiplier}
curve 89 94 interval {11 * interval_multiplier}

# Scale H1 to a percentage in [0,1]
# {scaled1 = .5 + yoff + H1}
comment {scaled1}

# Scale H2 to a percentage in [0,1]
# {scaled2 = .5 + yoff + H2}
comment {scaled2}

# Compute the approximate interval for the bottom of the mesh. We
# assume that there are a total of 14 elements along the full height of the
# domain in the 1x case.
# {bottom_interval1 = ceil(13*scaled1)}
# {top_interval1 = ceil(13*(1-scaled1))}
comment {bottom_interval1}
comment {top_interval1}

# {bottom_interval2 = ceil(13*scaled2)}
# {top_interval2 = ceil(13*(1-scaled2))}
comment {bottom_interval2}
comment {top_interval2}

# Intervals for top. Depends on the angle used above...
curve 18 interval {top_interval1 * interval_multiplier}
curve 44 interval {top_interval2 * interval_multiplier}
curve 2 interval {13 * interval_multiplier}

# Intervals for bottom. Depends on the angle used above...
curve 95 interval {bottom_interval1 * interval_multiplier}
curve 95 interval {bottom_interval2 * interval_multiplier}

# Mesh top with TRIs
surf 25 scheme TriDelaunay
mesh surf 25

# Mesh bottom with QUADs
surf 52 scheme Map
mesh surf 52

block 1 element type TRI3
block 2 element type QUAD4

# Write to file.
export mesh "nodal_normals_test_chevron_asymm_nonmatching_nogap.e" dimension 2 block 1 2 overwrite

# Local Variables:
# mode: shell-script
# End:
