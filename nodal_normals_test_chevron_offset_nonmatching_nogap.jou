# This script meshes a unit square which is cut by a "chevron" shaped
# interface. The idea is to generate an exactly-meshable interface with
# normals that are not perpendicular to the boundary normals.
# The chevron is allowed to be offset up and down in the y direction.

# cd '/Users/petejw/code/peterson_git/cubit/nodal_normals'
# play "nodal_normals_test_chevron_offset_nonmatching_nogap.jou"

# Clear any existing model
reset

# Create the bottom half.
create brick width 1 depth 1 height 1

# The angle of the cut from the x-axis in degrees.
# {angle = 10}

# The y-location where the cut planes will cross.
# {yoff = 0.2}

# Compute H = 1/2*tan(alpha). This is the distance above yoff where
# the interface intersects the sides of the mesh.
# {H = .5 * tan(angle * 3.14159265359 / 180)}

# Print the value of H for debugging. This is not an Aprepro command,
# hence it is not preceded by a comment character.
comment {H}

# If yoff+H > 0.5, we could probably still build the mesh, the
# interface just would not intersect the sides of the mesh...
# {check_val = yoff + H}
# {if (check_val > 0.5)}
# {Print("yoff,angle combination is not valid.")}
stop
# {endif}

# Check if the offset is too low.
# {if (yoff <= -0.5)}
# {Print("yoff is too small.")}
stop
# {endif}

# Check if the angle is valid.
# {if (angle < 0.)}
# {Print("angle must be between 0 and 90.")}
stop
# {endif}

# Check if the angle is valid.
# {if (angle > 90.)}
# {Print("angle must be between 0 and 90.")}
stop
# {endif}

# Cut the body with planes
webcut body all with plane xplane rotate {90 - angle} about z center 0 {yoff} 0
webcut body all with plane xplane rotate {-90 + angle} about z center 0 {yoff} 0

# Get rid of the bottom volumes
delete vol 1 2 4

# Make a copy volume 3 (creates volume 5)
vol 3 copy

# Create another brick (creates volume 6)
create brick width 1 depth 1 height 1

# Create the bottom part (remaining volumes are 3 and 6)
subtract volume 5 from volume 6

# block 1 on bottom, block 2 on top.
block 1 surf 25
block 2 surf 52

# Set up sideset ids and names.
sideset 1 curve 40 43
sideset 1 name 'contact_top'
sideset 2 curve 89 94
sideset 2 name 'contact_bot'

# Set up sidesets for other BCs
sideset 3 curve 79
sideset 3 name 'bottom'
sideset 4 curve 96
sideset 4 name 'right_bottom'
sideset 5 curve 44
sideset 5 name 'right_top'
sideset 6 curve 2
sideset 6 name 'top'
sideset 7 curve 18
sideset 7 name 'left_top'
sideset 8 curve 95
sideset 8 name 'left_bottom'

 # The base intervals are multiplied by the interval_multiplier variable
 # to get successively-refined grids.
 # {interval_multiplier = 1}

# Set intervals on the contact interfaces. We set the default slave
# interval slightly coarser than the master since that has been show
# to achieve best results in the past.
curve 40 43 interval {10 * interval_multiplier}
curve 89 94 interval {11 * interval_multiplier}

# Scale to [0,1]
# {scaled = .5 + yoff + H}
# comment {scaled}

# Compute the approximate interval for the bottom of the mesh. We
# assume that there are a total of 14 elements along the height of the
# domain.
# {bottom_interval = ceil(13*scaled)}
# {top_interval = ceil(13*(1-scaled))}
# comment {bottom_interval}
# comment {top_interval}

# Intervals for top. Depends on the angle used above...
curve 18 44 interval {top_interval * interval_multiplier}
curve 2 interval {13 * interval_multiplier}

# Intervals for bottom. Depends on the angle used above...
curve 95 96 interval {bottom_interval * interval_multiplier}

# Mesh top with TRIs
surf 25 scheme TriDelaunay
mesh surf 25

# Mesh bottom with QUADs
surf 52 scheme Map
mesh surf 52

block 1 element type TRI3
block 2 element type QUAD4

# Write to file.
export mesh "nodal_normals_test_chevron_offset_nonmatching_nogap.e" dimension 2 block 1 2 overwrite

# Local Variables:
# mode: shell-script
# End:
